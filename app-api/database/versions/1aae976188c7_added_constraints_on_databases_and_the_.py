"""added constraints on databases and the ability of having public datsets

Revision ID: 1aae976188c7
Revises: 0fe5a9e7a5bc
Create Date: 2024-08-15 22:29:25.372607

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '1aae976188c7'
down_revision: Union[str, None] = '0fe5a9e7a5bc'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('datasets', sa.Column('is_public', sa.Boolean(), nullable=True))
    op.execute('UPDATE datasets SET is_public = FALSE')
    op.execute('ALTER TABLE datasets ALTER COLUMN is_public SET NOT NULL')
    op.execute('ALTER TABLE datasets ALTER COLUMN user_id TYPE UUID USING user_id::uuid') 
    op.create_unique_constraint('_user_id_name_uc', 'datasets', ['user_id', 'name'])
    op.execute("INSERT INTO users (id, username, image_url_hash) (select user_id, 'unknown user' || ROW_NUMBER() OVER (ORDER BY user_id) , '0000' from (select distinct user_id from datasets) as datasetUsers where user_id not in (select id from users))")
    op.create_foreign_key(None, 'datasets', 'users', ['user_id'], ['id'])
    op.create_unique_constraint(None, 'users', ['username'])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'users', type_='unique')
    op.drop_constraint(None, 'datasets', type_='foreignkey')
    op.drop_constraint('_user_id_name_uc', 'datasets', type_='unique')
    op.alter_column('datasets', 'user_id',
               existing_type=sa.UUID(),
               type_=sa.VARCHAR(),
               existing_nullable=False)
    op.drop_column('datasets', 'is_public')
    # ### end Alembic commands ###
